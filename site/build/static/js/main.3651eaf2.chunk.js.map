{"version":3,"sources":["components/Login.tsx","components/SubscriptionChangeModal.tsx","components/SomeShit.tsx","App.tsx","index.tsx"],"names":["Login","login","useState","hasTriedCookieLogin","setHasTriedCookieLogin","handleLogin","googleData","a","fetch","method","body","JSON","stringify","token","tokenId","headers","res","status","json","user","signIn","useGoogleLogin","clientId","process","onSuccess","onFailure","cookiePolicy","tryCookieLogin","useEffect","width","height","justifyContent","alignItems","direction","mb","onClick","textAlign","SubscriptionChangeModal","searchString","modalProps","length","split","map","search","colorScheme","mr","onClose","SomeShit","props","setUser","setSearchString","loading","setLoading","isModalOpen","setIsModalOpen","save","data","newUser","handleLogout","position","p","email","minHeight","pb","base","md","as","size","value","onChange","e","target","placeholder","isLoading","isDisabled","search_words","join","isOpen","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","resetCSS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3651eaf2.chunk.js","sourcesContent":["import { Box, Button, Flex, Heading, Text } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useGoogleLogin } from \"react-google-login\";\nimport { User } from \"1337xto-subscriber-server/lib/prisma\";\n\ntype LoginProps = {\n  login: (user: User) => void;\n};\n\nconst Login = ({ login }: LoginProps): JSX.Element => {\n  const [hasTriedCookieLogin, setHasTriedCookieLogin] = useState(false);\n\n  const handleLogin = async (googleData: any) => {\n    const res = await fetch(\"/api/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        token: googleData.tokenId,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (res.status === 200) {\n      const user: User = await res.json();\n      login(user);\n    }\n  };\n\n  const { signIn } = useGoogleLogin({\n    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID || \"\",\n    onSuccess: handleLogin,\n    onFailure: handleLogin,\n    cookiePolicy: \"single_host_origin\",\n  });\n\n  const tryCookieLogin = async () => {\n    setHasTriedCookieLogin(true);\n    const res = await fetch(\"/api/me\");\n\n    if (res.status !== 200) return;\n    const user: User = await res.json();\n    login(user);\n  };\n\n  useEffect(() => {\n    if (!hasTriedCookieLogin) {\n      tryCookieLogin();\n    }\n  });\n\n  return (\n    <Flex\n      width=\"100%\"\n      height=\"100vh\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Flex direction=\"column\" alignItems=\"center\">\n        <Heading>1337xx.to hakubotti</Heading>\n        <Text mb=\"3\">Astu nykyaikaan ja automatisoi torrenttihakusi:)</Text>\n        <Button onClick={() => signIn()} textAlign=\"center\">\n          Kirjauppa sisään\n        </Button>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Login;\n","import {\n  Button,\n  Modal,\n  Text,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalProps,\n  UnorderedList,\n  ListItem,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype SubscriptionChangeModalProps = Omit<ModalProps, \"children\"> & {\n  searchString: string;\n};\n\nconst SubscriptionChangeModal = ({\n  searchString,\n  ...modalProps\n}: SubscriptionChangeModalProps): JSX.Element => {\n  return (\n    <>\n      <Modal {...modalProps}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            {searchString.length > 0 ? \"Tilaus muutettu\" : \"Tilaus poistettu\"}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            {searchString.length > 0 ? (\n              <>\n                <Text>Tilaus aloitettu hauille:</Text>\n                <UnorderedList mb=\"5\">\n                  {searchString.split(\", \").map((search) => (\n                    <ListItem>{search}</ListItem>\n                  ))}\n                </UnorderedList>\n                <Text>\n                  Sähköpostiisi pitäisi olla tullut viesti tilauksen\n                  muutoksesta. Jos kyseinen viesti on löytänyt tiensä perille\n                  asti, pitäisi tulevien hakubotin viestienkin löytää:)\n                </Text>\n              </>\n            ) : (\n              \"Tilaus poistettu. Sähköposteja ei ennää pitäisi tulla:)\"\n            )}\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={modalProps.onClose}>\n              Okokok\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default SubscriptionChangeModal;\n","import { Box, Button, Flex, Heading, Input, Text } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { User } from \"../../../server/lib/prisma\";\nimport Login from \"./Login\";\nimport SubscriptionChangeModal from \"./SubscriptionChangeModal\";\n\ntype SomeShitProps = {};\n\nconst SomeShit = (props: SomeShitProps): JSX.Element => {\n  const [user, setUser] = useState<User | null>(null);\n  const [searchString, setSearchString] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const login = (user: User) => {\n    setUser(user);\n    setSearchString(user.search_words.join(\", \"));\n  };\n\n  const save = async () => {\n    setLoading(true);\n    const res = await fetch(\"/api/update-subscription\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        searchString,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (res.status === 200) {\n      const data = await res.json();\n      const newUser: User = data.user;\n      setUser(newUser);\n      setIsModalOpen(true);\n    }\n    setLoading(false);\n  };\n\n  const handleLogout = async () => {\n    const res = await fetch(\"/api/logout\", {\n      method: \"POST\",\n    });\n    await res.json();\n    setUser(null);\n  };\n\n  return (\n    <>\n      {!user ? (\n        <Login login={login} />\n      ) : (\n        <>\n          <Flex\n            justifyContent=\"space-between\"\n            position=\"absolute\"\n            width=\"100%\"\n            p=\"5\"\n          >\n            <Text>Kirjautunut: {user.email}</Text>\n            <Button onClick={handleLogout}>Kirjaudu ulos</Button>\n          </Flex>\n          <Flex\n            width=\"100%\"\n            minHeight=\"100vh\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            p=\"5\"\n            pb={{ base: 0, md: 20 }}\n          >\n            <Box>\n              <Heading as=\"h2\" size=\"md\">\n                Syötä hakusanat, joita halajat tarkastella\n              </Heading>\n              <Text>\n                Jos halajat tarkastella useampaa torrenttia, erottele haut\n                pilkulla ja välillä.\n              </Text>\n              <Text>\n                Esimerkiksi: <i>one piece 980, one piece 981</i>\n              </Text>\n              <Text>\n                Huom! Isoilla ja pienillä kirjaimilla ei ole väliä haun kannalta\n              </Text>\n              <Input\n                value={searchString}\n                onChange={(e) => setSearchString(e.target.value)}\n                placeholder=\"one piece 980, one piece 981\"\n                mb=\"3\"\n              />\n              <Button\n                onClick={save}\n                isLoading={loading}\n                isDisabled={\n                  searchString === user.search_words.join(\", \") || loading\n                }\n                mb=\"5\"\n              >\n                Tallenna haku\n              </Button>\n              <Text>\n                Jos halajat poistella tilauksen, tallenna tyhjä haku niin\n                spämmiä ei pitäis enää tulla\n              </Text>\n            </Box>\n          </Flex>\n        </>\n      )}\n      <SubscriptionChangeModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        searchString={searchString}\n      />\n    </>\n  );\n};\n\nexport default SomeShit;\n","import { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport SomeShit from \"./components/SomeShit\";\n\nconst theme = extendTheme({\n  config: {\n    initialColorMode: \"dark\",\n    useSystemColorMode: false,\n  },\n});\n\nconst App = () => {\n  return (\n    <ChakraProvider resetCSS theme={theme}>\n      <SomeShit />\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}